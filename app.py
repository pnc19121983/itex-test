import streamlit as st
from PIL import Image
import base64
from io import BytesIO
import json
import os
import random
import string
import copy
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import pandas as pd

st.set_page_config(page_title="iTeX-Test", layout="wide")

hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .block-container {
        padding-top: 0rem;
        padding-bottom: 0rem;
        padding-left: 1vw;
        padding-right: 1vw;
        max-width: 100vw;
    }
    .stApp {padding-top: 0rem;}
    </style>
    """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def generate_exam_id(k=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=k))

def save_exam(data, exam_id):
    with open(f"exam_{exam_id}.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

def load_exam(exam_id):
    try:
        with open(f"exam_{exam_id}.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return None

def save_result(new_result, exam_id):
    fname = f"results_{exam_id}.json"
    results = []
    if os.path.exists(fname):
        with open(fname, "r", encoding="utf-8") as f:
            try: results = json.load(f)
            except: pass
    results.append(new_result)
    with open(fname, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False)

def load_results(exam_id):
    fname = f"results_{exam_id}.json"
    if not os.path.exists(fname): return []
    with open(fname, "r", encoding="utf-8") as f:
        try: return json.load(f)
        except: return []

def display_image_base64(b64str, caption="", img_ratio=0.5):
    img = Image.open(BytesIO(base64.b64decode(b64str)))
    max_display = int(1600 * img_ratio)
    buf = BytesIO()
    img.save(buf, format="PNG")
    b64 = base64.b64encode(buf.getvalue()).decode()
    html = f"""
    <div style="display: flex; justify-content: center;">
        <img src="data:image/png;base64,{b64}" width="{max_display}">
    </div>
    <div style="text-align: center; color: grey; font-size: 90%;">{caption}</div>
    """
    st.markdown(html, unsafe_allow_html=True)

def randomize_by_group(questions):
    group_mcq = [q for q in questions if q.get("type") == "mcq"]
    group_tf = [q for q in questions if q.get("type") == "true_false"]
    group_sa = [q for q in questions if q.get("type") == "short_answer"]
    idx_mcq = list(range(len(group_mcq)))
    idx_tf = list(range(len(group_tf)))
    idx_sa = list(range(len(group_sa)))
    random.shuffle(idx_mcq)
    random.shuffle(idx_tf)
    random.shuffle(idx_sa)
    shuffled_mcq = [copy.deepcopy(group_mcq[i]) for i in idx_mcq]
    shuffled_tf = [copy.deepcopy(group_tf[i]) for i in idx_tf]
    shuffled_sa = [copy.deepcopy(group_sa[i]) for i in idx_sa]
    shuffled = shuffled_mcq + shuffled_tf + shuffled_sa
    indices = idx_mcq + [i+len(group_mcq) for i in idx_tf] + [i+len(group_mcq)+len(group_tf) for i in idx_sa]
    return shuffled, indices

query_params = st.query_params
query_exam_id = query_params.get("exam_id", [None])[0]

import streamlit as st

if "role" not in st.session_state:
    col1, col2 = st.columns([1, 15])
    with col1:
        st.image("logo.png", width=80)
    with col2:
        st.markdown("## iTeX - T·∫†O ƒê·ªÄ KI·ªÇM TRA ONLINE")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("T√¥i l√† Gi√°o vi√™n"):
            st.session_state["role"] = "teacher"
    with col2:
        if st.button("T√¥i l√† H·ªçc sinh"):
            st.session_state["role"] = "student"
    st.stop()


if st.session_state["role"] == "teacher":
    col1, col2 = st.columns([1, 15])
    with col1:
        st.image("logo.png", width=80)
    with col2:
        st.markdown("## iTeX - T·∫†O ƒê·ªÄ KI·ªÇM TRA ONLINE")

    img_percent = st.slider("T·ª∑ l·ªá ·∫£nh so v·ªõi khung (%)", min_value=20, max_value=100, value=50, step=5)
    img_ratio = img_percent / 100.0

    teacher_name = st.text_input("Nh·∫≠p h·ªç t√™n gi√°o vi√™n", key="teacher_name_img")
    if teacher_name.strip() == "":
        st.info("Vui l√≤ng nh·∫≠p h·ªç t√™n ƒë·ªÉ ti·∫øp t·ª•c.")
        st.stop()

    excel_file = st.file_uploader("B∆∞·ªõc 1: T·∫£i l√™n file Excel ƒë√°p √°n (theo m·∫´u: STT | ƒê√°p √°n)", type=["xlsx", "xls"], key="excel_ans")
    uploaded_files = st.file_uploader(
        "B∆∞·ªõc 2: T·∫£i l√™n c√°c file ·∫£nh (Cau_xx: c√¢u h·ªèi, Da_xx: l·ªùi gi·∫£i - c√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c√≥)", 
        type=["png", "jpg", "jpeg"], 
        accept_multiple_files=True
    )

    exam_time = st.number_input("Th·ªùi gian l√†m b√†i (ph√∫t)", min_value=1, max_value=120, value=15)
    allow_review = st.checkbox("Cho ph√©p h·ªçc sinh xem ƒë√°p √°n sau khi n·ªôp b√†i", value=True)

    questions = []

    if excel_file and uploaded_files:
        df = pd.read_excel(excel_file)
        df.columns = [c.strip() for c in df.columns]
        col_stt = df.columns[0]   # C·ªôt s·ªë th·ª© t·ª±
        col_ans = df.columns[1]   # ƒê√°p √°n

        file_map = {f.name: f for f in uploaded_files}
        da_file_map = {}
        for f in uploaded_files:
            if f.name.startswith("Da_"):
                da_file_map[f.name] = f

        for idx, row in df.iterrows():
            stt_raw = str(row[col_stt]).strip()
            try:
                stt = f"{int(float(stt_raw)):02d}"
            except:
                st.warning(f"Sai ƒë·ªãnh d·∫°ng STT ·ªü d√≤ng {idx+2}: {stt_raw}")
                continue

            img_name = f"Cau_{stt}.jpg"
            if img_name not in file_map:
                for ext in ["png", "jpeg"]:
                    if f"Cau_{stt}.{ext}" in file_map:
                        img_name = f"Cau_{stt}.{ext}"
                        break

            answer = str(row[col_ans]).strip().upper()

            da_img_name = None
            for ext in ["jpg", "jpeg", "png"]:
                test_name = f"Da_{stt}.{ext}"
                if test_name in da_file_map:
                    da_img_name = test_name
                    break

            img_file = file_map.get(img_name)
            da_img_file = da_file_map.get(da_img_name) if da_img_name else None
            if not img_file:
                st.warning(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh c√¢u h·ªèi cho STT {stt} (d√≤ng {idx+2})")
                continue
            img_data = img_file.read()
            img_file.seek(0)
            da_img = base64.b64encode(da_img_file.read()).decode() if da_img_file else None
            if da_img_file: da_img_file.seek(0)

            # T·ª± ƒë·ªông ph√¢n lo·∫°i c√¢u h·ªèi
            if len(answer) == 1 and answer in ["A", "B", "C", "D"]:
                q_type = "mcq"
            elif len(answer) == 4 and all(c in ["ƒê", "S"] for c in answer):
                q_type = "true_false"
                answer4 = list(answer)
            else:
                q_type = "short_answer"

            q = {
                "img_name": img_name,
                "img_data": base64.b64encode(img_data).decode(),
                "type": q_type,
                "da_img_data": da_img
            }
            if q_type == "mcq":
                q["answer"] = answer
            elif q_type == "true_false":
                q["answers"] = answer4
            else:
                q["answer"] = answer

            questions.append(q)

        if questions:
            st.success(f"ƒê√£ nh·∫≠n {len(questions)} c√¢u h·ªèi t·ª´ Excel v√† ·∫£nh.")
            for i, q in enumerate(questions):
                st.write(f"**C√¢u {i+1}: Lo·∫°i:** {'Tr·∫Øc nghi·ªám' if q['type']=='mcq' else ('ƒê√∫ng/Sai' if q['type']=='true_false' else 'Tr·∫£ l·ªùi ng·∫Øn')}")
                display_image_base64(q["img_data"], caption=q["img_name"], img_ratio=img_ratio)
                st.write(f"ƒê√°p √°n: {q['answer'] if q['type']!='true_false' else ''.join(q['answers'])}")
                if q.get("da_img_data"):
                    display_image_base64(q["da_img_data"], caption=f"L·ªùi gi·∫£i {i+1}", img_ratio=img_ratio)
                st.markdown("---")

    if questions and st.button("T·∫°o ƒë·ªÅ"):
        exam_id = generate_exam_id()
        exam_data = {
            "exam_id": exam_id,
            "type": "image_exam",
            "teacher": teacher_name,
            "questions": questions,
            "exam_time": exam_time,
            "allow_review": allow_review,
            "img_ratio": img_ratio
        }
        save_exam(exam_data, exam_id)
        st.success(f"T·∫°o ƒê·ªÅ th√†nh c√¥ng! H√£y g·ª≠i M√£ ƒë·ªÅ cho h·ªçc sinh: **{exam_id}**")
        link_rel = f"?exam_id={exam_id}"
        #st.markdown(f"- G·ª≠i link n√†y cho h·ªçc sinh: [L√†m b√†i ngay]({link_rel})")
        #st.code(link_rel)
        #st.info("Gi√°o vi√™n l∆∞u l·∫°i m√£ ƒë·ªÅ, h·ªçc sinh v√†o ƒë√∫ng link/m√£ ƒë·ªÅ n√†y ƒë·ªÉ l√†m b√†i.")

    st.markdown("---")
    st.subheader("üìã Xem/t·ªïng h·ª£p k·∫øt qu·∫£ c·ªßa m·ªôt ƒë·ªÅ")
    check_exam_id = st.text_input("Nh·∫≠p M√É ƒê·ªÄ mu·ªën xem k·∫øt qu·∫£:", key="examid_gv")
    if check_exam_id.strip():
        check_exam_id = check_exam_id.strip().upper()
        exdata = load_exam(check_exam_id)
        if st.button("üîÑ L√†m m·ªõi danh s√°ch", key="refresh_results"):
            st.session_state[f"refresh_{check_exam_id}"] = st.session_state.get(f"refresh_{check_exam_id}", 0) + 1
        refresh_times = st.session_state.get(f"refresh_{check_exam_id}", 0)
        results = load_results(check_exam_id)
        if not exdata:
            st.error("Kh√¥ng t√¨m th·∫•y ƒë·ªÅ n√†y!")
        else:
            if not results:
                st.info("Ch∆∞a c√≥ h·ªçc sinh n√†o n·ªôp b√†i cho ƒë·ªÅ n√†y.")
            else:
                st.write(f"**T·ªïng s·ªë h·ªçc sinh ƒë√£ n·ªôp: {len(results)}**")
                student_scores = []
                for idx, r in enumerate(results):
                    diem = r['score']
                    st.write(f"{idx+1}. {r['name']} - {r['school']} - L·ªõp {r['class_']} - ƒêi·ªÉm: {diem}")
                    student_scores.append((r['name'], diem))
                if student_scores:
                    student_scores = sorted(student_scores, key=lambda x: -x[1])
                    names = [x[0] for x in student_scores]
                    diems = [x[1] for x in student_scores]

                    bar_colors = ["#EFFFF4"] * len(diems)  # m√†u xanh l√° t∆∞∆°i cho c·∫£ c·ªôt
                    bar_edgecolors = ["#17D46A"] * len(diems)  # vi·ªÅn c√πng m√†u

                    num_students = len(names)
                    # T√≠nh width t·ª± ƒë·ªông: √≠t HS th√¨ c·ªôt to, nhi·ªÅu HS th√¨ c·ªôt nh·ªè
                    width = max(0.2, min(0.8, 10/num_students))

                    fig, ax = plt.subplots(figsize=(max(6, 0.9*num_students), 5), dpi=500)
                    bars = ax.bar(names, diems, width=width, 
                                color=bar_colors, edgecolor=bar_edgecolors, linewidth=2)

                    ax.set_ylabel("ƒêi·ªÉm", fontsize=12)
                    ax.set_xlabel("H·ªçc sinh", fontsize=12)
                    ax.set_title("Bi·ªÉu ƒë·ªì ƒëi·ªÉm h·ªçc sinh", fontsize=14)

                    for bar, diem in zip(bars, diems):
                        ax.annotate(f"{diem}", xy=(bar.get_x() + bar.get_width() / 2, diem),
                                    xytext=(0, 4), textcoords="offset points", 
                                    ha='center', va='bottom', fontsize=12, 
                                    color="#1d1d1d", fontweight="bold")

                    plt.xticks(rotation=45, ha='right', fontsize=11)
                    plt.tight_layout()
                    st.pyplot(fig, dpi=500)

                    # üìã Li·ªát k√™ chi ti·∫øt k·∫øt qu·∫£ t·ª´ng h·ªçc sinh
                    st.markdown("### üìä B·∫£ng k·∫øt qu·∫£ chi ti·∫øt")

                    questions = exdata["questions"]

                    rows = []
                    for r in results:
                        row = {
                            "T√™n h·ªçc sinh": r["name"],
                            "ƒêi·ªÉm": f"{r['score']:.2f}"
                        }
                        for i, q in enumerate(questions):
                            user_ans = r["answers"][i] if i < len(r["answers"]) else None

                            # --- Icon theo lo·∫°i c√¢u h·ªèi ---
                            if q["type"] == "mcq":
                                if user_ans == q["answer"]:
                                    icon = "<span style='color:green;font-size:60px'>‚óè</span>"  # ƒë√∫ng
                                else:
                                    icon = "<span style='color:red;font-size:60px'>‚óè</span>"    # sai

                            elif q["type"] == "short_answer":
                                ans = str(user_ans).replace(" ", "").lower() if user_ans else ""
                                key = str(q["answer"]).replace(" ", "").lower()
                                if ans == key:
                                    icon = "<span style='color:green;font-size:60px'>‚óè</span>"  # ƒë√∫ng
                                else:
                                    icon = "<span style='color:red;font-size:60px'>‚óè</span>"    # sai

                            elif q["type"] == "true_false":
                                if isinstance(user_ans, list) and len(user_ans) == 4 and user_ans == q["answers"]:
                                    icon = "<span style='color:green;font-size:60px'>‚óè</span>"  # ƒë√∫ng c·∫£ 4
                                else:
                                    icon = "<span style='color:orange;font-size:60px'>‚óè</span>" # ch∆∞a ƒë√∫ng h·∫øt

                            else:
                                icon = "<span style='color:grey;font-size:60px'>‚óè</span>"       # ph√≤ng h·ªù

                            row[f"C√¢u {i+1}"] = icon

                        rows.append(row)

                    df = pd.DataFrame(rows)
                    st.write(df.to_html(escape=False, index=False), unsafe_allow_html=True)




                if st.button("X√≥a t·∫•t c·∫£ k·∫øt qu·∫£ c·ªßa ƒë·ªÅ n√†y", key="xoakq"+check_exam_id):
                    os.remove(f"results_{check_exam_id}.json")
                    st.rerun()

elif st.session_state["role"] == "student":
    col1, col2 = st.columns([1, 15])
    with col1:
        st.image("logo.png", width=80)
    with col2:
        st.markdown("## KI·ªÇM TRA ONLINE")
    exam_id = query_exam_id
    if not exam_id:
        exam_id = st.text_input("Nh·∫≠p M√É ƒê·ªÄ ƒë∆∞·ª£c gi√°o vi√™n g·ª≠i:", key="examid_hs")
    if not exam_id or not exam_id.strip():
        st.info("Vui l√≤ng nh·∫≠p ƒë√∫ng m√£ ƒë·ªÅ ho·∫∑c v√†o ƒë√∫ng link.")
        st.stop()
    exam_id = exam_id.strip().upper()

    exam_data = load_exam(exam_id)
    if not exam_data:
        st.warning("M√£ ƒë·ªÅ kh√¥ng t·ªìn t·∫°i. H·ªèi l·∫°i gi√°o vi√™n ho·∫∑c nh·∫≠p ƒë√∫ng!")
        st.stop()
    img_ratio = exam_data.get("img_ratio", 0.5)
    exam_time = exam_data.get("exam_time", 15)
    allow_review = exam_data.get("allow_review", True)

    name = st.text_input("H·ªç t√™n h·ªçc sinh", key="stu_name_img")
    school = st.text_input("Tr∆∞·ªùng", key="stu_school_img")
    class_ = st.text_input("L·ªõp", key="stu_class_img")
    if name.strip() == "" or school.strip() == "" or class_.strip() == "":
        st.info("ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        st.stop()

    def student_exists(name, school, class_, exam_id):
        results = load_results(exam_id)
        for r in results:
            if (
                r["name"].strip().lower() == name.strip().lower() and
                r["school"].strip().lower() == school.strip().lower() and
                r["class_"].strip().lower() == class_.strip().lower()
            ):
                return True
        return False

    if student_exists(name, school, class_, exam_id):
        st.warning("B·∫°n ƒë√£ n·ªôp b√†i cho ƒë·ªÅ n√†y. Kh√¥ng th·ªÉ l√†m l·∫°i!")
        st.stop()

    # Countdown v√† gi·ªõi h·∫°n th·ªùi gian
    # N√∫t "B·∫Øt ƒë·∫ßu l√†m b√†i"
    if f"time_end_{exam_id}" not in st.session_state:
        if st.button("üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i"):
            st.session_state[f"time_end_{exam_id}"] = (datetime.now() + timedelta(minutes=exam_time)).strftime('%Y-%m-%d %H:%M:%S')
            st.rerun()
        else:
            st.info("·∫§n 'B·∫Øt ƒë·∫ßu l√†m b√†i' ƒë·ªÉ t√≠nh th·ªùi gian v√† v√†o b√†i ki·ªÉm tra.")
            st.stop()


    now = datetime.now()
    time_end = datetime.strptime(st.session_state[f"time_end_{exam_id}"], '%Y-%m-%d %H:%M:%S')
    seconds_left = int((time_end - now).total_seconds())
    if seconds_left <= 0:
        st.error("‚è∞ ƒê√£ h·∫øt th·ªùi gian l√†m b√†i! B·∫°n ch·ªâ c√≥ th·ªÉ n·ªôp b√†i, m·ªçi l·ª±a ch·ªçn ƒë√£ b·ªã kh√≥a.")
        allow_do = False
    else:
        mins, secs = divmod(seconds_left, 60)
        st.success(f"‚è≥ Th·ªùi gian c√≤n l·∫°i: {mins:02d}:{secs:02d}")
        allow_do = True

    # RANDOM ƒê·ªÄ THEO NH√ìM
    if f"stu_img_rand_idx_{exam_id}" not in st.session_state:
        shuffled_questions, indices = randomize_by_group(exam_data["questions"])
        st.session_state[f"stu_img_rand_idx_{exam_id}"] = indices
        st.session_state[f"stu_img_rand_questions_{exam_id}"] = shuffled_questions
    questions = st.session_state[f"stu_img_rand_questions_{exam_id}"]

    # ƒê√°p √°n
    if f"stu_img_answers_{exam_id}" not in st.session_state or len(st.session_state[f"stu_img_answers_{exam_id}"]) != len(questions):
        st.session_state[f"stu_img_answers_{exam_id}"] = [None] * len(questions)

    opts = ["A", "B", "C", "D"]
    for i, q in enumerate(questions):
        if q.get("type") == "mcq":
            st.markdown(f"### C√¢u {i+1} (Tr·∫Øc nghi·ªám)")
            display_image_base64(q["img_data"], caption=f"C√¢u h·ªèi {i+1}", img_ratio=img_ratio)
            cols = st.columns(4)
            for idx, opt in enumerate(opts):
                btn_style = (
                    "background-color:#FFD700;color:black;font-weight:bold;border-radius:10px;font-size:20px;padding:18px 0px;"
                    if st.session_state[f"stu_img_answers_{exam_id}"][i] == opt
                    else "background-color:white;color:#FFD700;border:2px solid #FFD700;border-radius:10px;font-size:20px;padding:18px 0px;"
                )
                if allow_do:
                    if cols[idx].button(opt, key=f"ans_{i}_{opt}_{exam_id}", use_container_width=True):
                        st.session_state[f"stu_img_answers_{exam_id}"][i] = opt
                if st.session_state[f"stu_img_answers_{exam_id}"][i] == opt:
                    cols[idx].markdown(
                        f"<div style='{btn_style};text-align:center;margin-top:-40px;position:relative;z-index:1;'>{opt}</div>",
                        unsafe_allow_html=True
                    )
            if st.session_state[f"stu_img_answers_{exam_id}"][i]:
                st.success(f"ƒê√£ ch·ªçn ƒë√°p √°n: {st.session_state[f'stu_img_answers_{exam_id}'][i]}")
            else:
                st.info("H√£y ch·ªçn ƒë√°p √°n.")
        elif q.get("type") == "true_false":
            st.markdown(f"### C√¢u {i+1} (ƒê√∫ng/Sai t·ª´ng √Ω)")
            display_image_base64(q["img_data"], caption=f"C√¢u h·ªèi ƒê√∫ng/Sai {i+1}", img_ratio=img_ratio)
            tf_labels = ["√ù a", "√ù b", "√ù c", "√ù d"]

            if isinstance(st.session_state[f"stu_img_answers_{exam_id}"][i], list) and len(st.session_state[f"stu_img_answers_{exam_id}"][i]) == 4:
                user_tf = st.session_state[f"stu_img_answers_{exam_id}"][i]
            else:
                user_tf = [None]*4

            for j in range(4):
                checked = st.checkbox(tf_labels[j] + " (tick n·∫øu ƒë√∫ng)", 
                                    key=f"tf_{i}_{j}_{exam_id}", 
                                    value=(user_tf[j] == "ƒê"), 
                                    disabled=not allow_do)
                user_tf[j] = "ƒê" if checked else "S"

            st.session_state[f"stu_img_answers_{exam_id}"][i] = user_tf
            st.info("Tick v√†o √Ω ƒë√∫ng, ƒë·ªÉ tr·ªëng = Sai.")

        elif q.get("type") == "short_answer":
            st.markdown(f"### C√¢u {i+1} (Tr·∫£ l·ªùi ng·∫Øn)")
            display_image_base64(q["img_data"], caption=f"C√¢u tr·∫£ l·ªùi ng·∫Øn {i+1}", img_ratio=img_ratio)
            ans = st.text_input("Nh·∫≠p ƒë√°p √°n c·ªßa b·∫°n:", key=f"sa_{i}_{exam_id}", disabled=not allow_do)
            st.session_state[f"stu_img_answers_{exam_id}"][i] = ans

    # Ch·ªâ hi·ªán n√∫t N·ªôp n·∫øu c√≤n th·ªùi gian ho·∫∑c h·∫øt th·ªùi gian <= 30 gi√¢y
    if st.button("N·ªôp b√†i", disabled=(seconds_left <= -300)):
        answers = st.session_state[f"stu_img_answers_{exam_id}"]
        total_score = 0.0
        for i, q in enumerate(questions):
            if q.get("type") == "mcq":
                if answers[i] == q["answer"]:
                    total_score += 0.25
            elif q.get("type") == "true_false":
                if isinstance(answers[i], list) and len(answers[i]) == 4 and all(x in ["ƒê","S"] for x in answers[i]):
                    correct_cnt = sum([answers[i][k] == q["answers"][k] for k in range(4)])
                    if correct_cnt == 1:
                        total_score += 0.1
                    elif correct_cnt == 2:
                        total_score += 0.25
                    elif correct_cnt == 3:
                        total_score += 0.5
                    elif correct_cnt == 4:
                        total_score += 1.0
            elif q.get("type") == "short_answer":
                ans = str(answers[i]).replace(" ", "")
                key = str(q["answer"]).replace(" ", "")
                if ans and ans.lower() == key.lower():
                    total_score += 0.5
        total_score = round(total_score, 2)
        save_result({
            "name": name,
            "school": school,
            "class_": class_,
            "answers": answers,
            "score": total_score,
            "rand_indices": st.session_state[f"stu_img_rand_idx_{exam_id}"],
        }, exam_id)

        if allow_review:
            st.success(f"ƒê√£ n·ªôp b√†i! T·ªïng ƒëi·ªÉm: {total_score}")
            st.write("---")
            st.markdown(f"""
            <div style='
                background-color:#e6ffed;
                border-radius:10px;
                padding:18px;
                margin-bottom:10px;
                font-size:22px;
                border:2px solid #19c37d;
                text-align:center;'>
                <b>ƒêi·ªÉm c·ªßa b·∫°n: <span style="color:#0d9455;font-size:30px;">{total_score}</span></b>
            </div>
            """, unsafe_allow_html=True)
            st.write("### ƒê√°p √°n ƒë√∫ng v√† l·ªùi gi·∫£i:")
            for i, (a, q) in enumerate(zip(answers, questions)):
                if q.get("type") == "mcq":
                    st.markdown(f"#### C√¢u {i+1} (Tr·∫Øc nghi·ªám)")
                    col1, col2 = st.columns([1,1])
                    with col1:
                        display_image_base64(q["img_data"], caption=f"ƒê·ªÅ b√†i {i+1}", img_ratio=img_ratio)
                        if a == q["answer"]:
                            st.success(f"B·∫°n ch·ªçn {a} ‚úÖ ƒê√∫ng")
                        elif a:
                            st.error(f"B·∫°n ch·ªçn {a} ‚ùå Sai (ƒê√°p √°n ƒë√∫ng: {q['answer']})")
                        else:
                            st.warning("B·∫°n ch∆∞a tr·∫£ l·ªùi c√¢u n√†y")
                    with col2:
                        if q.get("da_img_data"):
                            display_image_base64(q["da_img_data"], caption=f"L·ªùi gi·∫£i {i+1}", img_ratio=img_ratio)
                        else:
                            st.info("Kh√¥ng c√≥ ·∫£nh l·ªùi gi·∫£i")
                elif q.get("type") == "true_false":
                    st.markdown(f"#### C√¢u {i+1} (ƒê√∫ng/Sai t·ª´ng √Ω)")
                    col1, col2 = st.columns([1,1])
                    with col1:
                        display_image_base64(q["img_data"], caption=f"ƒê·ªÅ b√†i ƒê√∫ng/Sai {i+1}", img_ratio=img_ratio)
                        if isinstance(a, list):
                            for j in range(4):
                                label = f"√ù {j+1}: B·∫°n ch·ªçn {a[j]}" if a[j] else f"√ù {j+1}: B·∫°n ch∆∞a tr·∫£ l·ªùi"
                                if a[j] and a[j] == q["answers"][j]:
                                    st.success(label + " ‚úÖ ƒê√∫ng")
                                elif a[j] and a[j] != q["answers"][j]:
                                    st.error(label + f" ‚ùå Sai (ƒê√°p √°n: {q['answers'][j]})")
                                else:
                                    st.warning(label)
                        else:
                            st.warning("B·∫°n ch∆∞a tr·∫£ l·ªùi c√¢u n√†y")
                    with col2:
                        if q.get("da_img_data"):
                            display_image_base64(q["da_img_data"], caption=f"L·ªùi gi·∫£i ƒê/S {i+1}", img_ratio=img_ratio)
                        else:
                            st.info("Kh√¥ng c√≥ ·∫£nh l·ªùi gi·∫£i")
                elif q.get("type") == "short_answer":
                    st.markdown(f"#### C√¢u {i+1} (Tr·∫£ l·ªùi ng·∫Øn)")
                    col1, col2 = st.columns([1,1])
                    with col1:
                        display_image_base64(q["img_data"], caption=f"C√¢u tr·∫£ l·ªùi ng·∫Øn {i+1}", img_ratio=img_ratio)
                        ans_disp = a if a else "(B·∫°n ch∆∞a tr·∫£ l·ªùi)"
                        if a and str(a).replace(" ","").lower() == str(q["answer"]).replace(" ","").lower():
                            st.success(f"B·∫°n tr·∫£ l·ªùi: {ans_disp} ‚úÖ ƒê√∫ng")
                        elif a:
                            st.error(f"B·∫°n tr·∫£ l·ªùi: {ans_disp} ‚ùå Sai (ƒê√°p √°n ƒë√∫ng: {q['answer']})")
                        else:
                            st.warning("B·∫°n ch∆∞a tr·∫£ l·ªùi c√¢u n√†y")
                    with col2:
                        if q.get("da_img_data"):
                            display_image_base64(q["da_img_data"], caption=f"L·ªùi gi·∫£i TLN {i+1}", img_ratio=img_ratio)
                        else:
                            st.info("Kh√¥ng c√≥ ·∫£nh l·ªùi gi·∫£i")
        else:
            st.success("B·∫°n ƒë√£ ho√†n th√†nh b√†i thi. H√£y ch·ªù gi√°o vi√™n c√¥ng b·ªë k·∫øt qu·∫£.")
            st.stop()
